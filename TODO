!IMPORTANT:
  ☐ <Pause/> component, for bootstrapping/setting up <Party/>, <Character/>s and <Menu/>
  ☐ Update /store/Store.js with initStore() method for help in bootstrapping
      https://stackoverflow.com/questions/60999058/load-initialstate-dynamically-with-createslice-in-redux-toolkit
      I'd like to eventually store game state when players Save to IndexedDb.
      I think localStorage could hold state, at 4kb? Unless I fully flesh out
      everything in this to make it, like, an actual game, as it is now, this
      piece is definitely smaller. 
      I'm interested in this topic because I don't know how involved I want
      to get with refactoring the state shape. Normalizing is an option (see below) and I'm curious if Party even needs to be that aware of the Characters. I tend to think too much in terms of a user and not a developer, and that's kind of how I built this - but it definitely can be cleaner. So knowing how to bootstrap the store from IndexedDB I think will
      help in better understanding the problem, at least, to give better
      guidance on a solution.
  ☐ 


Game Menu: 
  ✔ Only one item selectable at a time @done(20-09-27 14:40)
  ✔ Clicking Back in the menu should undo applying item effects @done(20-09-27 15:16)
  ✔ Clicking the active item should deactivate it @done(20-09-27 15:30)
  ✔ When applying item, deactivate states for the weapon/armor menu @done(20-09-27 15:58)
  Post-item Usage:
      clearing the classes on Character components
      So I handled the item quantity case for the UI,
      but now I need to figure out how to properly have
      the Character watch itself for when its stats values
      have been restored to max, and disable the classes
      appropriately to return the UI to where
      it needs to be.
      update: pretty sure I can rely on the
      canItemBeUsed paradigm to dispatch necessary
      actions
      In the end, what I ended up doing was writing an action
      creator that returned a function that received a dispatch
      and getState function as arguments, and used those to check
      state of the character stat and deactivate the item to return
      the UI to its regular state.
       
      ✔ State updates @done(21-04-01 19:22)
        ✔ deactivate item @done(20-09-27 17:32)
        ✔ disable menu option @done(20-09-27 17:32)
        ✔ dispatch deactivateItem @done(21-02-26 03:14)

  Weapon Equip:
    ✔ Setup click handler for WeaponMenu @done(21-04-01 19:17)
        
    UI Updates:
        ✔ On weapon select, announce active item @done(21-04-01 19:17)
        ✔ Party component sets class @done(21-04-01 19:19)
        ✔ Character components determine if they can use the weapon, dim if not @done(21-04-01 19:19)
        ✔ User clicks Character component, weapon swaps... @done(21-04-01 19:19)
        ✔ ...Character weapon flashes/pulses name @done(21-04-01 20:33)
        ✔ Classes are removed, UI returns to normal @done(21-04-01 20:08)
        ✔ Highlight weapon name in yellow when clicking it direct to equip new weapon @done(21-04-02 18:15)

    State Updates:
        ✔ onClick handler, setGearToEquip() @done(21-04-01 19:19)
        ✔ onCharacterSelect, if gearToEquip is truthy, and its a weapon type for the character, dispatch equip() @done(21-04-01 19:20)
        ✔ Take the name & type from the setGearToEquip, apply damage calculation @done(21-04-01 19:20)
        Do weapons have their own innate damage, or do different types have a formula that then gets calculated when equipped to the character to know how much damage it does? If we do have a formula, what should it be? I feel like damage and armor should adjust to the level of the character equipping it. We could even have a scaling boost factor based on, maybe, item rarity? Or some kind of power level?
        For now let's just say damage per character is level + damage.
        Crit chance can be flat 25% (or maybe 15 or 10). 
        Crit damage can be flat 50%.
        ✔ Spread new object data into char.gear.weapon @done(21-04-01 19:16)
        ✔ Put previously-equipped weapon into inventory @done(21-04-02 08:31)
    
  ✔ Weapon menu pulling from partySlice @done(21-03-29 08:27)
  ✔ Armor menu pulling from partySlice @done(21-03-29 08:27)

  Armor Equip:
    UI Updates:
      ✔ Ensure functionality is same as for Weapons @done(21-04-02 02:05)
      ✔ Highlight armor in yellow when directly clicking to equip armor @done(21-04-02 17:41)
    State Updates:
      ✔ Ensure state updates similarly to Weapons @done(21-04-02 02:05)
      ✔ Put previously-equipped armor into inventory @done(21-04-02 02:05)

  Scroll/Spell Equip:
    UI Updates:
      ✔ Mostly same as weapons & armor but probably need something a lil different @done(21-04-16 09:29)
      ✔ Scroll disappears from inventory @done(21-04-16 09:29)
      ☐ Show pop up like, "${char.name} learned 'Cure'!"
    State Updates:
      ✔ dispatch `learnSpell()` action @done(21-04-16 09:29)
      ✔ if character type is Mage, proceed @done(21-04-16 09:29)
      ✔ spell information is contained in scroll @done(21-04-16 09:29)
      ✔ put spell data into `characters[ characterId ].spells[ spellId ]` @done(21-04-16 09:29)


  UI Fine-tuning:
    ✔ Show hand on hovered Character (changed to showing color) @done(20-09-27 15:49)
    ✔ When clicking BackOption clear Character 'select' state @done(20-09-27 15:49)
    ✔ Adjusted areas of weapon/armor slots to be more mouse-friendly @done(20-09-27 16:05)
    ✔ create CSS classes for Weapon & Armor menu items to dim themselves if they can't be equipped by the Character whose gear slot was clicked @done(21-04-02 18:14)
    ✔ Create a selector in menuSlice to get the menu.ref in Weapon/Armor menu @done(21-04-02 17:41)
    ✔ Import canGearBeEquipped function from Character utils to determine item's equippability by selected gear slot's owning Character @done(21-04-02 17:41)
    User Story - 
    User clicks gear slot in particular Character
    Dispatch openMenu() with `character` menu ref
      selectMenuRef needs to be created so gear items know to check themselves and indicate if they can be equipped. 
    Maybe additional payload data can be passing current character type, or,
    also just dispatching something like `setCharacterForEquipping()`
    ✔ How to handle <BackOption/> in the event equippingCharacter is truthy @done(21-04-02 18:14)
    ☐ Figure out how to trigger gear-slot flash when the equip UserFlow is initiated via the Character component as opposed to the Menu component(s)
      Figure out how to do this with the new actions flow
    Setup interaction with `Spells` menu to open that character's list of learned spells into the `<Menu/>` component:
      ☐ wire up `onGearSlotSelect()` for spells
        - create `<SpellMenu/>` component
        - Gets a character reference (equippingCharacter?)
        - `<SpellMenu/>` renders list of spells in char
        - Spell items have click handler
          Maybe need a new party state - `party.castingSpell`

World Map: 

Battle System:

Quest:
  ☐ State Updates

IndexedDB:
  ☐ DB Creation
  ☐ Interaction Layer

Saving Game:
  ☐ DB Data 

Coding:
  ✘ Maybe PropTypes? @cancelled(21-04-02 12:02)
  ✔ Change State shape for characters to an id-based set of keys in an object @done(21-04-02 01:13)
      eg, party.chars[ $charId ].stats.hp, etc
  ✔ Also need to adjust inventory stuffs to account for IDs, finally @done(21-04-02 02:05)
  ☐ Generate IDs for items, gear
  ✔ Reduce clicks needed to equip when clicking a gear slot directly on a character @done(21-04-02 17:41)
      User clicks weapon or armor slot
      <WeaponMenu/> or <ArmorMenu/> opens
      User clicks desired weapon or armor to equip
      dispatch equip action for the given gearItem
      dispatch methods for resetting UI
  ☐ Hopefully eventually incorporate keyboard control
  ✔ Make a `characterSelected` action in `characterActions.js` that handles all cases where the user clicks the Character after selecting an item or gear @done(21-04-13 00:42)
  ✔ Make a `gearSlotSelected` action in `menuActions.js` that moves the component handler to dispatches this logic @done(21-04-13 00:43)
  ✔ Need a learnSpell action @done(21-04-16 09:30)

Bugfixes:
  ✔ make sure onCharacterSelect only fires when applying item not when selecting for weapon or armor @done(20-09-23 22:24)
  ✔ Fixed a bug where I wasn't properly checking the current character's state in Redux and therefore couldn't properly react to state changes and decide if we needed to deactivate the current item because the character's current stat value had met or exceeded their max value. @done(21-02-26 03:12)

